//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18046
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFTestClient.WCFTestReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://schemas.datacontract.org/2004/07/RepoLibrary")]
    [System.SerializableAttribute()]
    internal partial class Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFTestReference.IRepoLibrary")]
    internal interface IRepoLibrary {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepoLibrary/GetProject", ReplyAction="http://tempuri.org/IRepoLibrary/GetProjectResponse")]
        WCFTestClient.WCFTestReference.Project GetProject(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepoLibrary/GetProject", ReplyAction="http://tempuri.org/IRepoLibrary/GetProjectResponse")]
        System.Threading.Tasks.Task<WCFTestClient.WCFTestReference.Project> GetProjectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepoLibrary/SaveProject", ReplyAction="http://tempuri.org/IRepoLibrary/SaveProjectResponse")]
        string SaveProject(WCFTestClient.WCFTestReference.Project data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepoLibrary/SaveProject", ReplyAction="http://tempuri.org/IRepoLibrary/SaveProjectResponse")]
        System.Threading.Tasks.Task<string> SaveProjectAsync(WCFTestClient.WCFTestReference.Project data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IRepoLibraryChannel : WCFTestClient.WCFTestReference.IRepoLibrary, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class RepoLibraryClient : System.ServiceModel.ClientBase<WCFTestClient.WCFTestReference.IRepoLibrary>, WCFTestClient.WCFTestReference.IRepoLibrary {
        
        public RepoLibraryClient() {
        }
        
        public RepoLibraryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RepoLibraryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepoLibraryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepoLibraryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFTestClient.WCFTestReference.Project GetProject(int id) {
            return base.Channel.GetProject(id);
        }
        
        public System.Threading.Tasks.Task<WCFTestClient.WCFTestReference.Project> GetProjectAsync(int id) {
            return base.Channel.GetProjectAsync(id);
        }
        
        public string SaveProject(WCFTestClient.WCFTestReference.Project data) {
            return base.Channel.SaveProject(data);
        }
        
        public System.Threading.Tasks.Task<string> SaveProjectAsync(WCFTestClient.WCFTestReference.Project data) {
            return base.Channel.SaveProjectAsync(data);
        }
    }
}
